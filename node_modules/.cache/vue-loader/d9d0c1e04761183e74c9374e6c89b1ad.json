{"remainingRequest":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\src\\components\\Restaurants.vue?vue&type=style&index=0&id=a3a00054&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\src\\components\\Restaurants.vue","mtime":1579008674093},{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\New folder (3)\\projet_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZGl2aWRlciB7DQogIG1hcmdpbjogNXB4Ow0KfQ0KLnVwZGF0ZSB7DQogIHBhZGRpbmc6IDIwcHg7DQp9DQo="},{"version":3,"sources":["Restaurants.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgQA;AACA;AACA;AACA;AACA;AACA","file":"Restaurants.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <p>\r\n      Number of restaurants for each page :\r\n     <!--  <vue-material-slider :min=\"0\" :max=\"20\" v-model=\"pagesize\"></vue-material-slider> -->\r\n      <input\r\n        type=\"range\"\r\n        min=\"2\"\r\n        max=\"100\"\r\n        value=\"10\"\r\n        v-on:input=\"getDataFromServer()\"\r\n        v-model=\"pagesize\"\r\n      />\r\n      {{pagesize}}\r\n    </p>\r\n    <h1>Number of restaurants : {{nbRestaurants}}</h1>\r\n    <h3>Current page : {{ page }}</h3>\r\n    <md-button class=\"md-raised\" v-on:click=\"firstPage()\" v-bind:disabled=\"page==1\">&lt;&lt;</md-button>\r\n    <md-button class=\"md-raised\" v-on:click=\"previousPage()\" v-bind:disabled=\"page==1\">Previous</md-button>\r\n    <md-button class=\"md-raised\" v-on:click=\"nextPage()\" :disabled=\"page == nbPagesDeResultats\">Next</md-button>\r\n    <md-button class=\"md-raised\" v-on:click=\"lastPage()\" :disabled=\"page == nbPagesDeResultats\">&gt;&gt;</md-button>\r\n\r\n    <div class=\"md-layout\">\r\n      <h2 class=\"md-title, md-layout-item\">Add a restaurant</h2>\r\n      <md-field class=\"md-layout-item\">\r\n        <md-input placeholder=\"Name\" v-model=\"nom\" />\r\n      </md-field>\r\n      <span class=\"divider\"></span>\r\n      <md-field class=\"md-layout-item\">\r\n        <md-input placeholder=\"Cuisine\" v-model=\"cuisine\" />\r\n      </md-field>\r\n      <md-button class=\"md-raised md-primary\" v-on:click=\"addRestaurant\">Add</md-button>\r\n    </div>\r\n\r\n    <md-table v-model=\"restaurants\" md-sort=\"name\" md-sort-order=\"asc\" md-card md-fixed-header>\r\n      <md-table-toolbar>\r\n        <div class=\"md-toolbar-section-start\">\r\n          <h1 class=\"md-title\">Name search</h1>\r\n        </div>\r\n\r\n        <md-field md-clearable class=\"md-toolbar-section-end\">\r\n          <md-input\r\n            placeholder=\"Search by name...\"\r\n            v-model=\"nomRecherche\"\r\n            @input=\"getDataFromServer()\"\r\n          />\r\n        </md-field>\r\n      </md-table-toolbar>\r\n\r\n      <md-table-empty-state\r\n        md-label=\"No users found\"\r\n        :md-description=\"`No user found for this '${nomRecherche}' query. Try a different search term or create a new user.`\"\r\n      ></md-table-empty-state>\r\n\r\n      <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\r\n        <md-table-cell md-label=\"Name\" md-sort-by=\"name\">{{ item.name }}</md-table-cell>\r\n        <md-table-cell md-label=\"Cuisine\" md-sort-by=\"cuisine\">{{ item.cuisine }}</md-table-cell>\r\n        <md-table-cell md-label=\"Details\">\r\n          <router-link :to=\"'restaurant/'+item._id\">Details</router-link>\r\n        </md-table-cell>\r\n        <md-dialog class=\"update\" :md-active.sync=\"update\">\r\n          <h2>Update restaurant id : {{ resto._id }}</h2>\r\n          <br />\r\n          <form>\r\n            <md-field>\r\n              <!-- <label> Name : </label> -->\r\n              <!--  <md-input type =\"text\" placeHolder = \"Restaurant name \" v-model=\"resto.name\"></md-input> -->\r\n              <md-input type=\"text\" placeholder=\"Name\" v-model=\"resto.name\"></md-input>\r\n            </md-field>\r\n            <br />\r\n            <br />\r\n            <md-field>\r\n              <!--   <label> Cuisine : </label> -->\r\n              <!--  <md-input type =\"text\" placeHolder = \"Restaurant cuisine \" v-model=\"resto.cuisine\"></md-input> -->\r\n              <md-input type=\"text\" placeholder=\"Cuisine\" v-model=\"resto.cuisine\"></md-input>\r\n            </md-field>\r\n          </form>\r\n          <md-dialog-actions>\r\n            <md-button\r\n              class=\"md-primary\"\r\n              @click=\"update = false\"\r\n              v-on:click=\"getDataFromServer()\"\r\n            >Close</md-button>\r\n            <!-- on rafraichit pour restorer valeurs initiales -->\r\n            <md-button\r\n              class=\"md-primary\"\r\n              @click=\"update = false\"\r\n              v-on:click=\"updateRestaurant(resto)\"\r\n            >Save</md-button>\r\n            <!-- on modifie le restaurant -->\r\n          </md-dialog-actions>\r\n        </md-dialog>\r\n        <md-table-cell md-label=\"Update\">\r\n          <md-button class=\"md-primary md-raised\" @click=\"update = true, resto= item\">Update</md-button>\r\n        </md-table-cell>\r\n\r\n        <md-dialog class=\"update\" :md-active.sync=\"del\">\r\n          <h2>Delete restaurant id : {{ resto._id }}</h2>\r\n          <br />\r\n          <p>Do you really want to delete this restaurant ?</p>\r\n          <md-dialog-actions>\r\n            <md-button\r\n              class=\"md-primary\"\r\n              @click=\"del = false\"\r\n              v-on:click=\"getDataFromServer()\"\r\n            >Cancel</md-button>\r\n            <!-- on rafraichit pour restorer valeurs initiales -->\r\n            <md-button\r\n              class=\"md-primary\"\r\n              @click=\"del = false\"\r\n              v-on:click=\"deleteRestaurant(resto._id)\"\r\n            >Confirm</md-button>\r\n            <!-- on modifie le restaurant -->\r\n          </md-dialog-actions>\r\n        </md-dialog>\r\n        <md-table-cell md-label=\"Delete\">\r\n          <md-button\r\n            class=\"md-accent md-raised\"\r\n            @click=\"del = true, resto= item\"\r\n          >Delete</md-button>\r\n        </md-table-cell>\r\n      </md-table-row>\r\n    </md-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Restaurants\",\r\n  props: {},\r\n\r\n  data: function() {\r\n    return {\r\n      resto: [],\r\n      update: false,\r\n      del: false,\r\n      restaurants: [],\r\n      nbRestaurants: 0,\r\n      nom: \"\",\r\n      cuisine: \"\",\r\n      page: 1,\r\n      pagesize: 10,\r\n      nomRecherche: \"\",\r\n      nbPagesDeResultats: 0,\r\n      apiURL: \"http://localhost:8080/api/restaurants\"\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    console.log(\"Before print!\");\r\n    this.getDataFromServer();\r\n  },\r\n\r\n  methods: {\r\n    getDataFromServer() {\r\n      // ici on fait un fetch pour récupérer des\r\n      // restaurants sur le serveur.\r\n      let url =\r\n        this.apiURL +\r\n        \"?page=\" +\r\n        this.page +\r\n        \"&pagesize=\" +\r\n        this.pagesize +\r\n        \"&name=\" +\r\n        this.nomRecherche;\r\n\r\n      fetch(url)\r\n        .then(reponseJSON => {\r\n          return reponseJSON.json();\r\n        })\r\n        .then(reponseJS => {\r\n          // ici on a la réponse sous la forme\r\n          // d'un objet JS\r\n          this.restaurants = reponseJS.data;\r\n          this.nbRestaurants = reponseJS.count;\r\n          this.nbPagesDeResultats = Math.floor(\r\n            this.nbRestaurants / this.pagesize\r\n          );\r\n        });\r\n    },\r\n\r\n    async deleteRestaurant(id) {\r\n      try {\r\n        let reponseJSON = await fetch(this.apiURL + \"/\" + id, {\r\n          method: \"DELETE\"\r\n        });\r\n        let reponseJS = await reponseJSON.json();\r\n        console.log(\"Restaurant supprime : \" + reponseJS.msg);\r\n        this.getDataFromServer(); // on rafraichit l'affichage\r\n      } catch (err) {\r\n        console.log(\"Erreur dans le fetchs DELETE \" + err.msg);\r\n      }\r\n    },\r\n\r\n    async updateRestaurant(resto) {\r\n      let dataForm = new FormData();\r\n      dataForm.append(\"id\", resto.id);\r\n      dataForm.append(\"nom\", resto.name);\r\n      dataForm.append(\"cuisine\", resto.cuisine);\r\n      let responseJSON = await fetch(this.apiURL + \"/\" + resto._id, {\r\n        method: \"PUT\",\r\n        body: dataForm\r\n      });\r\n      let responseJS = await responseJSON.json();\r\n      console.log(responseJS.msg);\r\n      this.getDataFromServer();\r\n    },\r\n    /*  deleteRestaurant(index) {\r\n      this.restaurants.splice(index, 1);\r\n    }, */\r\n    async addRestaurant(event) {\r\n      // eviter le comportement par defaut\r\n      event.preventDefault();\r\n      let dataForm = new FormData();\r\n      dataForm.append(\"nom\", this.nom);\r\n      dataForm.append(\"cuisine\", this.cuisine);\r\n\r\n      let reponseJSON = await fetch(this.apiURL, {\r\n        method: \"POST\",\r\n        body: dataForm\r\n      });\r\n      let reponseJS = await reponseJSON.json();\r\n      console.log(reponseJS.msg);\r\n\r\n      this.nom = \"\";\r\n      this.cuisine = \"\";\r\n\r\n      this.getDataFromServer(); // on rafraichit\r\n    },\r\n    getColor(index) {\r\n      return index % 2 ? \"lightBlue\" : \"pink\";\r\n    },\r\n    nextPage() {\r\n      console.log(\"Next page\");\r\n      this.page++;\r\n      this.getDataFromServer();\r\n    },\r\n    previousPage() {\r\n      console.log(\"Previous page\");\r\n      this.page--;\r\n      this.getDataFromServer();\r\n    },\r\n    firstPage() {\r\n      this.page=1;\r\n      this.getDataFromServer();\r\n    },\r\n    lastPage() {\r\n      this.page=this.nbPagesDeResultats;\r\n      this.getDataFromServer();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.divider {\r\n  margin: 5px;\r\n}\r\n.update {\r\n  padding: 20px;\r\n}\r\n</style>\r\n"]}]}